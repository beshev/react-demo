{"ast":null,"code":"var _jsxFileName = \"E:\\\\My Projects\\\\react-demo\\\\routing\\\\src\\\\components\\\\PersonMovies.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst baseUrl = 'https://swapi.dev/api/films';\nexport default function MoviesList() {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const {\n    id\n  } = useParams();\n\n  // Since the api doen't provide user movies request we take all movies\n  useEffect(() => {\n    fetch(baseUrl).then(res => res.json()).then(data => setMovies(data.results));\n  }, [id]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Person movies\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this), movies.map(x => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: x.title\n    }, x.title, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 30\n    }, this))]\n  }, void 0, true);\n}\n_s(MoviesList, \"NANvulODOcuHC80YrrizNGO3MNs=\", false, function () {\n  return [useParams];\n});\n_c = MoviesList;\nvar _c;\n$RefreshReg$(_c, \"MoviesList\");","map":{"version":3,"names":["useEffect","useState","useParams","jsxDEV","_jsxDEV","Fragment","_Fragment","baseUrl","MoviesList","_s","movies","setMovies","id","fetch","then","res","json","data","results","children","fileName","_jsxFileName","lineNumber","columnNumber","map","x","title","_c","$RefreshReg$"],"sources":["E:/My Projects/react-demo/routing/src/components/PersonMovies.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nconst baseUrl = 'https://swapi.dev/api/films'\r\n\r\nexport default function MoviesList() {\r\n    const [movies, setMovies] = useState([]);\r\n    const { id } = useParams();\r\n\r\n    // Since the api doen't provide user movies request we take all movies\r\n    useEffect(() => {\r\n        fetch(baseUrl)\r\n            .then(res => res.json())\r\n            .then(data => setMovies(data.results))\r\n    }, [id]);\r\n\r\n    return (\r\n        <>\r\n            <h2>Person movies</h2>\r\n            {movies.map(x => <li key={x.title}>{x.title}</li>)}\r\n        </>\r\n    );\r\n}"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,SAAS,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE7C,MAAMC,OAAO,GAAG,6BAA6B;AAE7C,eAAe,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACjC,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM;IAAEW;EAAG,CAAC,GAAGV,SAAS,CAAC,CAAC;;EAE1B;EACAF,SAAS,CAAC,MAAM;IACZa,KAAK,CAACN,OAAO,CAAC,CACTO,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAACG,IAAI,IAAIN,SAAS,CAACM,IAAI,CAACC,OAAO,CAAC,CAAC;EAC9C,CAAC,EAAE,CAACN,EAAE,CAAC,CAAC;EAER,oBACIR,OAAA,CAAAE,SAAA;IAAAa,QAAA,gBACIf,OAAA;MAAAe,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACrBb,MAAM,CAACc,GAAG,CAACC,CAAC,iBAAIrB,OAAA;MAAAe,QAAA,EAAmBM,CAAC,CAACC;IAAK,GAAjBD,CAAC,CAACC,KAAK;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAe,CAAC,CAAC;EAAA,eACpD,CAAC;AAEX;AAACd,EAAA,CAjBuBD,UAAU;EAAA,QAEfN,SAAS;AAAA;AAAAyB,EAAA,GAFJnB,UAAU;AAAA,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}